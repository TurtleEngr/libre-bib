#!/usr/bin/env php
<?php
# TBD Use show fields lo, to get col names for output.

# -----------------------------
function fusage() {
    global $argc;
    global $argv;

    system("pod2text $argv[0]");
    exit(1);     # ---------->

    /* ...

=pod

=head1 NAME

export-lo-2-txt.php - export lo db to biblio.txt

=head1 SYNOPSIS

 ./export-lo-2-txt.php [-h]

=head1 DESCRIPTION

Table cgDbLo will be exported to cgDirTmp/cgLoFile. That is, the table
will be converted to a text file.

=head1 OPTIONS

=over 4

See also ENVIRONMENT section.

=item B<-h> - help

This help.

=back

=for comment =head1 RETURN VALUE

=for comment =head1 ERRORS

=for comment =head1 EXAMPLES

=head1 ENVIRONMENT

Set these in conf.env

    cgDbLo
    cgDirTmp
    cgLoFile

=for comment =head1 FILES

=for comment =head1 SEE ALSO

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=for comment =head1 AUTHOR

=for comment =head1 HISTORY

=cut

... */
} # fUsage

# -----------------------------
function fCleanUp() {
    echo "\n";
} # fCleanUp

# -----------------------------
function fGetOps() {
    global $argc;
    global $argv;
    global $cgDebug;
    global $cgDirTmp;
    global $cgLoFile;
    global $gpHelp;

    $gpHelp = false;
    $tOpt = getopt("ch");
    $gpHelp = isset($tOpt['h']);
    if ($gpHelp or $argc < 2)
        fUsage();

    $tConf = $_ENV['cgDirApp'] . "/etc/conf.php";
    require_once "$tConf";
    require_once "$cgBin/util.php";
    uFixBool();

} # fGetOps

# -----------------------------
function fValidate() {
    global $cgDbLo;
    global $cgDebug;
    global $cgDirTmp;
    global $cgLoFile;
    global $gFileH;
    global $gFileOut;

    uValidateCommon();

    $gFileOut = "$cgDirTmp" . '/' . "$cgLoFile";
    if ("$gFileOut" == "")
        throw new Exception("\nError: Missing cgDirTmp/cgLoFile def. [export-lo-2-txt.php:" . __LINE__ . "]");

    if (($gFileH = fopen($gFileOut, "w")) == FALSE)
        throw new Exception("Cannot open file: $gFileOut. [export-lo-2-txt.php:" . __LINE__ . "]");

    if ( ! uTableExists($cgDbLo))
        throw new Exception("\nError: Missing table $cgDbLo [export-lo-2-txt.php:" . __LINE__ . "]");
} # fValidate

# -----------------------------
function fExportTable() {
    global $cgBin;
    global $cgDbLo;
    global $cgDebug;
    global $cgDirTmp;
    global $gDb;
    global $gFileH;
    global $gFileOut;

    fprintf($gFileH, "# Generated by export-lo-2-txt.php\n");
    fprintf($gFileH, "# " . uDate("iso") . "\n\n");

    $tColList = array("Identifier", "Type", "RepType", "Booktitle",
        "Title", "Author", "Custom2", "Year", "Custom4", "Publisher",
        "Note", "ISBN", "Custom3", "URL", "Custom1", "Annote",
        "Address", "Chapter", "Edition", "Editor", "Howpublish",
        "Institutn", "Journal", "Month", "Number", "Organizat",
        "Pages", "School", "Series", "Volume", "Custom5");

    # Get all columns
    $tRecH = $gDb->prepare("select * from $cgDbLo");
    $tRecH->execute();

    # Get each record and output the biblio.txt block
    $tCount = 0;
    while ($tRec = $tRecH->fetch(PDO::FETCH_ASSOC)) {
        echo ".";
        ++$tCount;
        fprintf($gFileH, "\n");

        # Process in tColList order
        foreach (array_values($tColList) as $tCol) {
            $tVal = $tRec["$tCol"];
            if ("$tVal" == "")
                continue;
            if ($tCol == "Type")
                $tVal = uType2Txt($tVal);
            fprintf($gFileH, "%s: %s\n", uLo2TxtMap($tCol), $tVal);
        }
    } # while
    fprintf($gFileH, "\n");
    echo "\nProcessed: $tCount \n";
    fclose($gFileH);

    echo "\nSorting \n";
    $tTmpFile = $cgDirTmp . '/t.tmp';
    shell_exec("/bin/bash -c \"$cgBin/sort-para.sh <$gFileOut >$tTmpFile\"");
    rename($tTmpFile, $gFileOut);
} # fExportTable

# ****************************************
# Includes, GetOps, Validate, ReadOnly

try {
    fGetOps();
    fValidate();
} catch(Exception $e) {
    echo "Problem with setup: " . $e->getMessage() . "\n";
    exit(2);     # ---------->
}

# Write section
try {
    fExportTable();
} catch(Exception $e) {
    echo "Problem creating table: " . $e->getMessage() . "\n";
    exit(3);     # ---------->
}
exit(0);     # ---------->
?>
